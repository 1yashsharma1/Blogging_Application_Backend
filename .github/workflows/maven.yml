
name: Blogging Application Code Review, Build and Publish Job

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  codeql-analyze:
    runs-on: ubuntu-latest
    timeout-minutes: 360
    strategy:
      fail-fast: false
      matrix:
        language: ['java']

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Create CodeQL Directory
      run: |
        mkdir -p codeql-results  # Create the CodeQL directory
        echo "CodeQL directory created."
      working-directory: ${{ github.workspace }}

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: java

    - name: Autobuild Code before Analysis
      uses: github/codeql-action/autobuild@v3

    - name: Run CodeQL analysis
      uses: github/codeql-action/analyze@v3
      with:
        languages: java
        working-directory: ${{ github.workspace }}

    - name: Upload CodeQL results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: ${{ github.workspace }}/codeql-results/codeql-results.sarif

  
  build:

    runs-on: ubuntu-latest
    needs: codeql-analyze
    
    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
        
    - name: Build with Maven
      run: mvn -B -DskipTests=true package --file pom.xml

  publish-job:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up JDK
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
    - run: mvn --batch-mode --update-snapshots verify -DskipTests=true
    - run: mkdir staging && cp target/*.jar staging
    - uses: actions/upload-artifact@v3
      with:
        name: Package
        path: staging
    
    - name: Determine Release Version
      id: determine_version
      run: |
        commit_count=$(git rev-list --count HEAD)
        echo "RELEASE_VERSION=v${commit_count}" >> $GITHUB_ENV
        echo "Release version is v${commit_count}"

    - name: Create Release Artifact
      run: |
        # Placeholder example: Deploying to GitHub Releases
        # Create a release
        gh release create v1.0.0 target/*.jar -n "Release v${commit_count}"
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
